#!/usr/bin/env python3

import numpy as np
from scipy import stats
import matplotlib.pyplot as plt   

# set font to Arial
import matplotlib as mpl
mpl.rc('font',family='Arial')

# datasets can be found in accompanying Zenodo repository
z500_amjjas2_z = np.load('z500_amjjas2_z.npy')

# panel A - highest z500 z-score each year 

vec = np.reshape(z500_amjjas2_z,(15372,11392))
splits = np.split(vec,84,axis=0)
maxs = []
for k in range(84):
    year = splits[k]
    maxs.append(np.nanmax(year))

x = np.arange(84)
y = maxs
intercept = stats.linregress(x,y)[1]
slope = stats.linregress(x,y)[0]
vals1 = []
for j in range(84):
    intercept += slope
    vals1.append(intercept)

fig = plt.figure(figsize=(8,6))
plt.plot(maxs,'-o', color='firebrick')
plt.plot(vals1,'--', color='tab:brown')
#plt.plot(np.polyval(poly, x),'--', color='firebrick')
plt.grid(linewidth=0.5)
plt.xticks(np.arange(0,81,10), ('1940','1950','1960','1970','1980',
                                '1990','2000','2010','2020'), fontsize = 13)
plt.yticks(np.arange(0,5.01,0.5), fontsize=13)
plt.ylabel('Z500 standardized anomaly', fontsize = 15)
plt.title('Highest Z500 s.d. value each year (detrended)', fontsize = 20)

# panel B - highest z500 domain-averaged value each year 

z500_z_normed = np.load('z500_z_normed.npy')

splits = np.split(z500_z_normed,84,axis=0)
maxs = []
for k in range(84):
    year = splits[k]
    daily_means = np.nanmean(year,axis=1)
    maxs.append(np.nanmax(daily_means))

x = np.arange(84)
y = maxs
intercept = stats.linregress(x,y)[1]
slope = stats.linregress(x,y)[0]
vals1 = []
for j in range(84):
    intercept += slope
    vals1.append(intercept)

# x = np.arange(84)
# slopes1 = np.empty(10000)
# for k in range(10000):
#     run = np.random.permutation(streaks)
#     slopes1[k] = stats.linregress(x,run)[0]
# slope_perm = stats.percentileofscore(slopes1, slope)

# poly = np.polyfit(x,y,deg=3)

fig = plt.figure(figsize=(8,6))
plt.plot(maxs,'-o', color='firebrick')
plt.plot(vals1,'--', color='tab:brown')
#plt.plot(np.polyval(poly, x),'--', color='firebrick')
plt.grid(linewidth=0.5)
plt.xticks(np.arange(0,81,10), ('1940','1950','1960','1970','1980',
                                '1990','2000','2010','2020'), fontsize = 13)
plt.yticks(np.arange(0,3.51,0.5), fontsize=13)
plt.ylabel('Z500 standardized anomaly', fontsize = 15)
plt.title('Highest domain-averaged Z500 s.d. value \n in each year (detrended)', fontsize = 20)

# panel C - highest z500 actual each year

z500_amjjas_actual = np.load('z500_amjjas_actual.npy')

vec = np.reshape(z500_amjjas_actual,(15372,11392))
splits = np.split(vec,84,axis=0)
maxs = []
for k in range(84):
    year = splits[k]
    maxs.append(np.nanmax(year))

x = np.arange(84)
y = maxs
intercept = stats.linregress(x,y)[1]
slope = stats.linregress(x,y)[0]
vals1 = []
for j in range(84):
    intercept += slope
    vals1.append(intercept)

# x = np.arange(84)
# slopes1 = np.empty(10000)
# for k in range(10000):
#     run = np.random.permutation(streaks)
#     slopes1[k] = stats.linregress(x,run)[0]
# slope_perm = stats.percentileofscore(slopes1, slope)

# poly = np.polyfit(x,y,deg=3)

fig = plt.figure(figsize=(8,6))
plt.plot(maxs,'-o', color='firebrick')
plt.plot(vals1,'--', color='tab:brown')
#plt.plot(np.polyval(poly, x),'--', color='firebrick')
plt.grid(linewidth=0.5)
plt.xticks(np.arange(0,81,10), ('1940','1950','1960','1970','1980',
                                '1990','2000','2010','2020'), fontsize = 13)
plt.yticks(np.arange(5930,6000.1,10), fontsize=13)
plt.ylabel('Z500 actual value (m)', fontsize = 15)
plt.title('Highest Z500 value each year', fontsize = 20)

# panel D - highest z500 domain-averaged value each year

z500_actual_normed = np.load('z500_actual_normed.npy')

splits = np.split(z500_actual_normed,84,axis=0)
maxs = []
for k in range(84):
    year = splits[k]
    daily_means = np.nanmean(year,axis=1)
    maxs.append(np.nanmax(daily_means))

x = np.arange(84)
y = maxs
intercept = stats.linregress(x,y)[1]
slope = stats.linregress(x,y)[0]
vals1 = []
for j in range(84):
    intercept += slope
    vals1.append(intercept)

# x = np.arange(84)
# slopes1 = np.empty(10000)
# for k in range(10000):
#     run = np.random.permutation(streaks)
#     slopes1[k] = stats.linregress(x,run)[0]
# slope_perm = stats.percentileofscore(slopes1, slope)

# poly = np.polyfit(x,y,deg=3)

fig = plt.figure(figsize=(8,6))
plt.plot(maxs,'-o', color='firebrick')
plt.plot(vals1,'--', color='tab:brown')
#plt.plot(np.polyval(poly, x),'--', color='firebrick')
plt.grid(linewidth=0.5)
plt.xticks(np.arange(0,81,10), ('1940','1950','1960','1970','1980',
                                '1990','2000','2010','2020'), fontsize = 13)
plt.yticks(np.arange(5830,5880.1,10), fontsize=13)
plt.ylabel('Z500 actual value (m)', fontsize = 15)
plt.title('Highest domain-averaged Z500 value each year', fontsize = 20)
